import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
data=pd.read_csv("/Users/TT/Downloads/emnist-letters-train.csv")
data.head()

data = np.array(data)
m, n = data.shape
np.random.shuffle(data) # shuffle before splitting into dev and training sets

data_dev = data[0:1000].T
Y_test = data_dev[0]
X_test = data_dev[1:n]
X_test = X_dev / 255.

data_train = data[1000:m].T
Y_train = data_train[0]
X_train = data_train[1:n]
X_train = X_train / 255.
_,m_train = X_train.shape
X_train.shape

#Mapping label number to letter
Mapping={
1:'A',
2:'B',
3:'C',
4:'D',
5:'E',
6:'F',
7:'G',
8:'H',
9:'I',
10:'J',
11	:'K',
12:	'L',
13	:'M',
14	:'N',
15:	'O',
16:	'P',
17	:'Q',
18	:'R',
19	:'S',
20	:'T',
21	:'U',
22	:'V',
23	:'W',
24	:'X',
25:'Y',
26	:'Z'}

def init_params():
    W1 = np.random.rand(27, 784) - 0.5
    b1 = np.random.rand(27, 1) - 0.5
    W2 = np.random.rand(27, 27) - 0.5
    b2 = np.random.rand(27, 1) - 0.5
    return W1, b1, W2, b2
    
    def ReLU(Z):
    return np.maximum(Z, 0)

def sigmoid(x):
    return 1.0/(1.0 + np.exp(-x))

def sigmoid_der(x):
    return x*(1.0 - x)

def ReLU_deriv(Z):
    return Z > 0
    
def forward_prop(W1, b1, W2, b2, X):
Z1 = W1.dot(X) + b1
A1 = ReLU(Z1)
Z2 = W2.dot(A1) + b2
A2 = sigmoid(Z2)
return Z1, A1, Z2, A2

def one_hot(Y):
    one_hot_Y = np.zeros((Y.size, Y.max() + 1))
    one_hot_Y[np.arange(Y.size), Y] = 1
    one_hot_Y = one_hot_Y.T
    return one_hot_Y
def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y,costs):
    one_hot_Y= one_hot(Y)
    dZ2 = A2 - one_hot_Y
    costs.append(np.mean(abs(dZ2)))
    dW2 = 1 / m * dZ2.dot(A1.T)
    db2 = 1 / m * np.sum(dZ2)
    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)
    dW1 = 1 / m * dZ1.dot(X.T)
    db1 = 1 / m * np.sum(dZ1)
    return dW1, db1, dW2, db2,costs
    
 def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):
    W1 = W1 - alpha * dW1
    b1 = b1 - alpha * db1    
    W2 = W2 - alpha * dW2  
    b2 = b2 - alpha * db2    
    return W1, b1, W2, b2
def get_predictions(A2):
    return np.argmax(A2, 0)

def get_accuracy(predictions, Y):
    print(predictions, Y)
    return np.sum(predictions == Y) / Y.size
def gradient_descent(X, Y, alpha, iterations):
    W1, b1, W2, b2 = init_params()
    costs=[]
    for i in range(iterations):
        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)
        dW1, db1, dW2, db2,costs = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y,costs)
        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)
        if i % 100 == 0:
            print("Iteration: ", i)
            predictions = get_predictions(A2)
            print(get_accuracy(predictions, Y))
    return W1, b1, W2, b2,costs
    
W1, b1, W2, b2,costs = gradient_descent(X_train, Y_train, 0.10, 1501)


plt.plot(costs)
plt.show()

def make_predictions(X, W1, b1, W2, b2):
    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)
    predictions = get_predictions(A2)
    return predictions

def test_prediction(index, W1, b1, W2, b2,Mapping,X_dev,Y_dev):
    current_image = X_dev[:, index, None]
    prediction = make_predictions(X_dev[:, index, None], W1, b1, W2, b2)
    label = Y_dev[index]
    print("Prediction: ", Mapping[prediction[0]])
    print("Label: ", Mapping[label])
    
    current_image = current_image.reshape((28, 28)) * 255
    plt.gray()
    plt.imshow(current_image, interpolation='nearest')
    plt.show()
    
  test_prediction(89, W1, b1, W2, b2,Mapping,X_dev,Y_dev)
  test_prediction(5, W1, b1, W2, b2,Mapping,X_dev,Y_dev)
